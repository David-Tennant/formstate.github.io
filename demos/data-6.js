var data = {"type":"app","index":6,"htmlFileName":"app-6.html","sources":[{"mode":"js","code":"/** React + MUI + mobx */\nimport * as React from 'react';\nimport { render, Button, ErrorText } from './mui';\nimport { observer } from 'mobx-react';\nimport { observable, action } from 'mobx';\nimport { resize } from 'eze/lib/client';\nimport { Vertical, Horizontal } from './gls';\n\n/** Field */\nimport { Field } from './field';\n\n/** FieldState */\nimport { FieldState, FormState } from '../../index';\n\n\n/** Our validations */\nconst requiredWithMessage\n  = (message: string) =>\n    (val: string) => !val.trim() && message;\nconst atLeastOneWithMessage\n  = (message: string) =>\n    (val: any[]) => !val.length && message;\n\n/**\n * TypeScript tip:\n * Specialize your generic types to make annotations easier\n **/\ntype Name = FieldState<string>;\ntype Feature = FormState<{ name: Name }>;\ntype Features = FormState<Feature[]>;\ntype Car = FormState<{ name: Name, features: Features }>;\ntype Cars = FormState<Car[]>;\n\nclass AppState {\n  @observable cars: Cars = new FormState([]).validators(atLeastOneWithMessage(\"At least on car is needed\"));\n\n  @action addACar = () => {\n    const car: Car = new FormState({\n      name: new FieldState({ value: '' }).validators(requiredWithMessage(\"Car needs a name\")),\n      features: new FormState([]).validators(atLeastOneWithMessage(\"Car must have at least one feature\")),\n    })\n    this.cars.$.push(car);\n  }\n\n  @action addAFeatureToACar = (car: Car) => {\n    const feature: Feature\n      = new FormState({\n        name: new FieldState({ value: '' })\n          .validators(requiredWithMessage(\"Feature needs a name\"))\n      });\n    car.$.features.$.push(feature);\n  }\n}\nconst state = new AppState();\n\nrender(() => {\n  return (<form onSubmit={async (e) => {\n    e.preventDefault();\n    const res = await state.cars.validate();\n    if (res.hasError) {\n      return;\n    }\n    alert('Valid!');\n  }}>\n    <Vertical>\n      {/** Add cars button */}\n      <Button onClick={state.addACar}>\n        Add {state.cars.$.length ? 'another' : 'a'} car\n      </Button>\n\n      {/** For each car */}\n      {state.cars.$.map((car, carKey) => {\n        return (\n          <Vertical key={carKey} style={{ marginLeft: '10px' }}>\n            <Field\n              id={\"carName\" + carKey}\n              label=\"Car Name\"\n              fieldState={car.$.name}\n            />\n\n            {/** For each feature in car */}\n            {!!car.$.features.$.length\n              && <Vertical style={{ padding: '10px', border: '1px dotted #333' }}>\n                {car.$.features.$.map((feature, featureKey) => {\n                  return (\n                    <Field\n                      key={featureKey}\n                      id={carKey + \"featureName\" + featureKey}\n                      label=\"Feature Name\"\n                      fieldState={feature.$.name}\n                    />\n                  );\n                })}\n              </Vertical>\n            }\n\n            {car.hasError && <ErrorText>Car has error: {car.error}</ErrorText>}\n            <Button onClick={() => state.addAFeatureToACar(car)}>\n              Add {car.$.features.$.length ? 'another' : 'a'} feature\n            </Button>\n          </Vertical>\n        );\n      })}\n\n      {/** Over all form submit */}\n      <Horizontal verticalAlign=\"center\">\n        <Button\n          type=\"submit\">\n          Submit\n        </Button>\n        {state.cars.hasError && <ErrorText>Form has error: {state.cars.error}</ErrorText>}\n      </Horizontal>\n    </Vertical>\n  </form>);\n});\n"}],"height":"600px"}